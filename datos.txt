# Grupos de Seguridad


{'ResponseMetadata': {'RetryAttempts': 0, 'HTTPHeaders': {'date': 'Thu, 04 May 2017 23:03:44 GMT', 'server': 'AmazonEC2',
														'content-type': 'text/xml;charset=UTF-8', 'transfer-encoding': 'chunked', 'vary': 'Accept-Encoding'},
					  'RequestId': 'dda145c4-aa1f-45dc-ad9e-0b686594084a', 'HTTPStatusCode': 200},
 'SecurityGroups': [{'Description': 'default VPC security group',
 					 'IpPermissionsEgress': [{'UserIdGroupPairs': [], 'PrefixListIds': [], 'Ipv6Ranges': [],
  											  'IpRanges': [{'CidrIp': '0.0.0.0/0'}], 'IpProtocol': '-1'}],
  					  'GroupName': 'default', 'VpcId': 'vpc-0b1dd76d',
  					  'IpPermissions': [{'PrefixListIds': [], 'ToPort': 80, 'Ipv6Ranges': [{'CidrIpv6': '::/0'}], 'UserIdGroupPairs': [], 'FromPort': 80,
  					  					'IpRanges': [{'CidrIp': '0.0.0.0/0'}], 'IpProtocol': 'tcp'},
  					  					{'UserIdGroupPairs': [], 'PrefixListIds': [], 'Ipv6Ranges': [{'CidrIpv6': '::/0'}], 'IpRanges': [{'CidrIp': '0.0.0.0/0'}], 'IpProtocol': '-1'},
  					  					{'PrefixListIds': [], 'ToPort': 22, 'Ipv6Ranges': [{'CidrIpv6': '::/0'}], 'UserIdGroupPairs': [], 'FromPort': 22,
  					  					 'IpRanges': [{'CidrIp': '0.0.0.0/0'}], 'IpProtocol': 'tcp'},
  					  					 {'PrefixListIds': [], 'ToPort': 0, 'Ipv6Ranges': [{'CidrIpv6': '::/0'}], 'UserIdGroupPairs': [], 'FromPort': 0, 'IpRanges': [{'CidrIp': '0.0.0.0/0'}], 'IpProtocol': 'tcp'}],
  					   'OwnerId': '655407531141', 'GroupId': 'sg-aa5400d7'},


  					  {'Description': 'launch-wizard-1 created 2017-03-13T16:30:27.142-05:00',
  					   'IpPermissionsEgress': [{'UserIdGroupPairs': [], 'PrefixListIds': [], 'Ipv6Ranges': [],
  					   							'IpRanges': [{'CidrIp': '0.0.0.0/0'}], 'IpProtocol': '-1'}],
  					   'GroupName': 'launch-wizard-1', 'VpcId': 'vpc-0b1dd76d',
  					   'IpPermissions': [{'PrefixListIds': [], 'ToPort': 80, 'Ipv6Ranges': [], 'UserIdGroupPairs': [], 'FromPort': 80,
  					                      'IpRanges': [{'CidrIp': '201.230.190.195/32'}], 'IpProtocol': 'tcp'},
  					                     {'PrefixListIds': [], 'ToPort': 22, 'Ipv6Ranges': [{'CidrIpv6': '::/0'}], 'UserIdGroupPairs': [], 'FromPort': 22, 'IpRanges': [{'CidrIp': '0.0.0.0/0'}], 'IpProtocol': 'tcp'},
  					                     {'PrefixListIds': [], 'ToPort': 40000, 'Ipv6Ranges': [{'CidrIpv6': '::/0'}], 'UserIdGroupPairs': [], 'FromPort': 0, 'IpRanges': [{'CidrIp': '0.0.0.0/0'}], 'IpProtocol': 'tcp'}],
  					    'OwnerId': '655407531141', 'GroupId': 'sg-53cd032c',
  					    'Tags': [{'Value': 'libre', 'Key': 'Name'}]},



  					   {'Description': 'launch-wizard-2 created 2017-05-01T19:29:06.624-05:00',
  					   'IpPermissionsEgress': [{'UserIdGroupPairs': [], 'PrefixListIds': [], 'Ipv6Ranges': [], 'IpRanges': [{'CidrIp': '0.0.0.0/0'}], 'IpProtocol': '-1'}], 'GroupName': 'launch-wizard-2', 'VpcId': 'vpc-0b1dd76d',
  					   'IpPermissions': [{'PrefixListIds': [], 'ToPort': 80, 'Ipv6Ranges': [{'CidrIpv6': '::/0'}], 'UserIdGroupPairs': [], 'FromPort': 80,
  					                      'IpRanges': [{'CidrIp': '0.0.0.0/0'}], 'IpProtocol': 'tcp'},
  					                     {'PrefixListIds': [], 'ToPort': 65535, 'Ipv6Ranges': [{'CidrIpv6': '::/0'}], 'UserIdGroupPairs': [], 'FromPort': 0,
  					                      'IpRanges': [{'CidrIp': '0.0.0.0/0'}], 'IpProtocol': 'tcp'},
  					                     {'PrefixListIds': [], 'ToPort': 22, 'Ipv6Ranges': [{'CidrIpv6': '::/0'}], 'UserIdGroupPairs': [], 'FromPort': 22,
  					                      'IpRanges': [{'CidrIp':  '0.0.0.0/0'}], 'IpProtocol': 'tcp'},
  					                     {'PrefixListIds': [], 'ToPort': 40000, 'Ipv6Ranges': [{'CidrIpv6': '::/0'}], 'UserIdGroupPairs': [], 'FromPort': 0,
  					                      'IpRanges': [{'CidrIp': '0.0.0.0/0'}], 'IpProtocol': 'tcp'}],
  					    'OwnerId': '655407531141', 'GroupId': 'sg-34c03a4a'},



  					    {'Description': 'launch-wizard-3 created 2017-05-04T16:33:08.939-05:00',
  					     'IpPermissionsEgress': [{'UserIdGroupPairs': [], 'PrefixListIds': [], 'Ipv6Ranges': [], 'IpRanges': [{'CidrIp': '0.0.0.0/0'}], 'IpProtocol': '-1'}],
  					     'GroupName': 'launch-wizard-3', 'VpcId': 'vpc-0b1dd76d',
  					     'IpPermissions': [{'PrefixListIds': [], 'ToPort': 80, 'Ipv6Ranges': [], 'UserIdGroupPairs': [], 'FromPort': 80,
  					     					'IpRanges': [{'CidrIp': '190.238.227.0/24'}], 'IpProtocol': 'tcp'},
  					     				   {'PrefixListIds': [], 'ToPort': 22, 'Ipv6Ranges': [], 'UserIdGroupPairs': [], 'FromPort': 22, 'IpRanges': [{'CidrIp': '0.0.0.0/0'}], 'IpProtocol': 'tcp'}],
  					     'OwnerId': '655407531141', 'GroupId': 'sg-81ea37ff', 'Tags': [{'Value': 'nuevo', 'Key': 'Name'}]},
  					    ]}

190.238.227.0/24


--------------------

{'SecurityGroups': [
{'IpPermissions': [
				{'IpRanges': [{'CidrIp': '0.0.0.0/0'}],
				 'IpProtocol': 'tcp',
				 'ToPort': 80,
				 'PrefixListIds': [],
				 'FromPort': 80,
				 'UserIdGroupPairs': [],
				 'Ipv6Ranges': [{'CidrIpv6': '::/0'}]},
				{'IpRanges': [{'CidrIp': '0.0.0.0/0'}],
				 'IpProtocol': 'tcp',
				 'ToPort': 65535,
				 'PrefixListIds': [],
				 'FromPort': 0,
				 'UserIdGroupPairs': [],
				 'Ipv6Ranges': [{'CidrIpv6': '::/0'}]},
				{'IpRanges': [{'CidrIp': '0.0.0.0/0'}], 'IpProtocol': 'tcp', 'ToPort': 22, 'PrefixListIds': [], 'FromPort': 22, 'UserIdGroupPairs': [], 'Ipv6Ranges': [{'CidrIpv6': '::/0'}]}, {'IpRanges': [{'CidrIp': '0.0.0.0/0'}], 'IpProtocol': 'tcp', 'ToPort': 40000, 'PrefixListIds': [], 'FromPort': 0, 'UserIdGroupPairs': [], 'Ipv6Ranges': [{'CidrIpv6': '::/0'}]}], 'GroupId': 'sg-34c03a4a', 'IpPermissionsEgress': [{'IpRanges': [{'CidrIp': '0.0.0.0/0'}], 'PrefixListIds': [], 'IpProtocol': '-1', 'Ipv6Ranges': [], 'UserIdGroupPairs': []}], 'VpcId': 'vpc-0b1dd76d', 'GroupName': 'launch-wizard-2', 'OwnerId': '655407531141', 'Description': 'launch-wizard-2 created 2017-05-01T19:29:06.624-05:00'}], 'ResponseMetadata': {'RetryAttempts': 0, 'RequestId': '5670bed6-278c-4b53-a6d6-97fa1072c99f', 'HTTPStatusCode': 200, 'HTTPHeaders': {'transfer-encoding': 'chunked', 'date': 'Thu, 04 May 2017 23:43:23 GMT', 'server': 'AmazonEC2', 'content-type': 'text/xml;charset=UTF-8', 'vary': 'Accept-Encoding'}}}


http://boto3.readthedocs.io/en/latest/guide/ec2-example-security-group.html

http://docs.aws.amazon.com/es_es/AmazonVPC/latest/GettingStartedGuide/SecurityGroup.html


http://wogcc.state.wy.us/rnewuserspage.html

(' --------------- ROMPESE ', 
['/home/iimdev/workspace/NAV/statecrawler/mongoLoader/Loader.py',
'staging', '/local/export/tmp/0/production/WY',
'WY', '/local/export/tmp/0/meta/WY.csv',
'/local/export/staticfiles'])


 def _goto_well_page(self):
        url = "http://wogcc.state.wy.us/rnewuserspage.html"
        self.open(url)
        if "could not be found" in self.content:
            return False
        return True

    def _get_all_wells_from_dbf(self, start_idx=0, offset=-1):
        idx = 0
        def get_url_from_filename(file_name):
            """Get url for filenames we use in crawling"""
            return self.BASEURL + "/downloads/" + file_name

        def get_filename_from_url(url):
            url = url.replace('%20', '_')
            return url.split("/")[-1]
     	if not self._goto_well_page():
            print "Error _goto_well_page"
        links = self.soup.findAll("a")
        dbfs = []
        for l in links:
            if (l.text).strip() == "All Wells":
                db =  l.attrs["href"]
                dbfs =  db.split('/')[-1:] 
        #dbfs = ["090116_Wells.zip"]
        dbf_urls = [{'fileName': f_name, 'url': get_url_from_filename(f_name)}
                    for f_name in dbfs]
        dbf_filenames = self._download_zipped_files(dbf_urls, frmt='DBF')
        dbf_wells = self._parse_metas_databases(dbf_filenames, frmt='DBF',
                                                parse_func=self._normalize_well_from_dbf)
        csv_urls = {}
        today = datetime.now()
        extension  = "/DumpByApdA.cfm?bmon=01&emon=%s&Points=Y&bday=01&eyear=%s&byear=1900&eday=%s&cType=1" % (today.day,today.year,today.month)
        csv_urls['url'] = self.BASEURL + extension
        csv_urls['filename'] = "wells.csv"
        csv_filenames = self._download_zipped_files(csv_urls, frmt='csv')
        csv_wells = self._parse_metas_databases(csv_filenames, frmt='csv',
                                                parse_func=self._normalize_well_from_csv)
        wells = self._merge_wells_collections([{'well_generator': dbf_wells,
                                                'api_key': "api"},
                                               {'well_generator': csv_wells,
                                                  'api_key': "api"}])